#include <iostream>
using namespace std;

//f(92)的值，不考虑十位的1的话，0-9有1个1，92有92%10=9个0-9，即9*f(9)，除开十位剩下2，,个位值引入的1的个数为f(2)，l另外十位为1时引入10个1，f(92)=9*f(9)+f(2)+10
//同理f(925)=9*f(99)+f(25)+100,在0-899中，99会轮流出现9次，加上剩下25，再加上百位出现的1有100次。
class Solution1 {
public:
	int NumberOf1Between1AndN_Solution(int n)
	{
		if (n<10)return n != 0;
		int k = n, width = 0;
		while (k != 0){
			width++;
			k /= 10;
		}
		k = n;
		int extra_num = 0;
		if (int(k / pow(10, width - 1))>1)extra_num = pow(10, width - 1);
		else extra_num = (n % (unsigned int)pow(10, width - 1)) + 1;
		return (n / (unsigned int)pow(10, width - 1))*NumberOf1Between1AndN_Solution(pow(10, width - 1) - 1) + extra_num + NumberOf1Between1AndN_Solution(n % (unsigned int)pow(10, width - 1));
	}
};

class Solution {
public:
	int NumberOf1Between1AndN_Solution(int n)
	{
		//主要思路：设定整数点（如1、10、100等等）作为位置点i（对应n的各位、十位、百位等等），分别对每个数位上有多少包含1的点进行分析
		//根据设定的整数位置，对n进行分割，分为两部分，高位n/i，低位n%i
		//当i表示百位，且百位对应的数>=2,如n=31456,i=100，则a=314,b=56，此时百位为1的次数有a/10+1=32（最高两位0~31），每一次都包含100个连续的点，即共有(a%10+1)*100个点的百位为1
		//当i表示百位，且百位对应的数为1，如n=31156,i=100，则a=311,b=56，此时百位对应的就是1，则共有a%10(最高两位0-30)次是包含100个连续点，当最高两位为31（即a=311），本次只对应局部点00~56，共b+1次，所有点加起来共有（a%10*100）+(b+1)，这些点百位对应为1
		//当i表示百位，且百位对应的数为0,如n=31056,i=100，则a=310,b=56，此时百位为1的次数有a/10=31（最高两位0~30）
		//综合以上三种情况，当百位对应0或>=2时，有(a+8)/10次包含所有100个点，还有当百位为1(a%10==1)，需要增加局部点b+1
		//之所以补8，是因为当百位为0，则a/10==(a+8)/10，当百位>=2，补8会产生进位位，效果等同于(a/10+1)
		int count = 0;
		for (int i = 1; i <= n; i *= 10)
		{
			//i表示当前分析的是哪一个数位
			int a = n / i, b = n%i;
			count +=  (a + 8) / 10 * i +  (a % 10 == 1)*(b + 1);
		}
		return count;
	}
};
int main()
{

	Solution mys;
	Solution1 mys1;

	cout << mys.NumberOf1Between1AndN_Solution(908) << endl;
	cout << mys1.NumberOf1Between1AndN_Solution(908) << endl;
	cout << "end" << endl;
	system("pause");
}